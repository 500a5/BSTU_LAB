SYSTEM_INFO

wProcessorRevision  
Архитектурно-зависимая версия процессора. 
Высокий байт - это модель, а младший байт - степпинг. 
Например, если значение xxyy , номер модели и степпинг могут отображаться следующим образом:
Модель xx , Stepping yy

wProcessorArchitecture
Архитектура процессора установленной операционной системы. 

wProcessorLevel 
Архитектурный уровень процессора.

dwNumberOfProcessors
Количество логических процессоров в текущей группе.

dwPageSize
Размер страницы и гранулярность защиты страниц и обязательств

lpMinimumApplicationAddress
Указатель на самый низкий адрес памяти, доступный для приложений и библиотек динамической компоновки (DLL).

lpMaximumApplicationAddress
Указатель на наивысший адрес памяти, доступный для приложений и библиотек DLL.

dwActiveProcessorMask
Маска, представляющая набор процессоров, сконфигурированных в системе. сообщает какие процессоры активны

dwAllocationGranularity
Зеркальность для начального адреса, в котором может быть выделена виртуальная память


EnumProcesses
•	EnumProcesses перечисляет идентификаторы процессов, для каждого про-цесса в системе;
(
DWORD *lpidProcess,           
DWORD  cb,                           
DWORD *cbNeeded               
);
•   Параметр IpidProcess— это указатель на массив элементов типа DWORD, который в результате работы этой функции будет заполнен значениями ID процессов.
•   Параметр cb содержит количество элементов типа DWORD, передаваемых в массиве с помощью параметра IpidProcess.
•   По окончании работы функции параметр cbNeeded будет содержать количество бай¬тов, скопированных в массив, на который указывает параметр IpidProcess. Выраже¬ние cbNeeded div SizeOf (DWORD) будет определять число элементов, скопированных в массив, т.е. число запущенных процессов.
После вызова этой функции массив, передаваемый с помощью параметра IpidProcess. будет содержать несколько значений ID процессов. Нужно отметить, что эти значения сами по себе не представляют особой ценности, но с их помощью (путем передачи ID процесса функции API OpenProcessf()) можно получить дескриптор процесса, вооружившись которым вы сможете вызывать другие функции PSAPI или даже другие функции Win32 API, требую¬щие дескриптора процесса.

Функция OpenProcess() используется для преобразования идентификатора каждого процесса в дескриптор процесса. В качестве первого параметра этому методу можно передать несколько признаков, но для запроса информации с помощью функций PSAPI луч¬ше всего использовать тандем PROCESS_QUERY_INFORMATION и PROCESS_VM_READ

По идентификатору можно определить дескриптор любого процесса с помо¬щью функции OpenProcess:
HAMDLE  OpenProcess( 
DWORD dwDesiredAccess,        // Флаг доступа.
BOOL bInheritHandle,                // Флаг наследования дескриптора.
DWORD dwProcessID	               // Идентификатор процесса.   .
);

Функция GetModuleFileName принимает дескриптор модуля, чтобы вернуть полное имя (имя и путь) исполняемого файла:
DWORD GetModuleFileName(
HMODULE hModule,                 	// Дескриптор модуля.
LPTSTR IpFilename,                            // Указатель на буфер-приемник пути к модулю.
       DWORD nSize	                           //  Размер буфера в символах.
);
