#include <iostream>
#include <locale.h>
#include <math.h>
#include <fstream>
#include <stdio.h>
#include <string>

using namespace std;


struct Person {
    string name;
    int age;
    int marks[4];
    Person() {};

    friend bool operator < (const Person p1, const Person p2);
    friend bool operator > (const Person p1, const Person p2);
    friend bool operator == (const Person p1, const Person p2);
    friend bool operator != (const Person p1, const Person p2);
    friend bool operator <= (const Person p1, const Person p2);
    friend bool operator >= (const Person p1, const Person p2);
    friend ostream& operator<<(ostream& out, const Person& p);
};

//????? ??? ?????????? ???????? ???? ??
class DLSException : public exception {

    string mesError;
public:
    DLSException(string _mes) : mesError(_mes) {};
    ~DLSException() = default;
    const char* what() { return mesError.c_str(); };
};

//??????? ????? - ?? ????
class EmptyDList : public DLSException {
public:
    EmptyDList() : DLSException("???? ????!") {};
};

//??????? ????? - ????? ??
class EndDList : public  DLSException {
public:
    EndDList() : DLSException("?????????? ??!") {};
};

template<class Type>

class DList   //??????? ? ?????? ????
{

    struct Node       //??????? ??????? ?????? ??
    {
        Type x;     //?????? x ??? ?????????? ? ??
        Node* Next, * Prev; //??????? ?? ???? ?????? ? ??????       ????? ??
    };

    Node* Head, * Tail; //??????? ?? ???? ???? ?? ? ??? ????
public:
    DList()
    {
        Head = NULL;
        Tail = NULL;
    }

    Node* temp;
    bool EndList() { return (temp == NULL); }
    bool EmptyList() { return (Head == NULL); }

    void AddNode(Type x)
    {
        temp = new Node; //??????? ????? ??? ???? ????? ????????

        if (EndList())			//?? ?????
            throw EndDList();

        temp->Next = NULL;  //???????, ?? ?????? ?? ??????    ????? ????
        temp->x = x; //???????? ?????? ? ????????

        if (Head != NULL) //?? ?? ?? ?? ????
        {
            temp->Prev = Tail; //??????? ???? ?? ????? ????? ? ??. ????
            Tail->Next = temp; //??????? ???? ?????? ?? ??? ?????
            Tail = temp; //???? ???? ???
        }
        else //?? ?? ?? ?????
        {
            temp->Prev = NULL; //????? ????? ????? ? ??????
            Head = Tail = temp;  //??????=?????=?? ?????, ?? ??? ????????
        }
    }

    void Show() //??? ?? ?? ??
    {
        if (EmptyList())
            throw EmptyDList();

        temp = Head; //?????? ????? ?? ???? ????? ?????
        while (!EndList()) //???? ?? ????? ???? ??????
        {
            cout << temp->x << endl; //????? ?????? ?????? ?????? ?? ??
            temp = temp->Next; //????? ???? ?? ???? ?????? ?????
        }
    }

    bool inList(Type el) //????, ???? ?? ????? ? ??
    {
        temp = Head; //?????? ????? ?? ???? ????? ?????
        while (!EndList()) //???? ?? ????? ???? ??????
        {
            if (temp->x == el)
                return true;
            temp = temp->Next;
        }
        return false;
    }

    void GetListPost(Type* E) //?????? ????? ??? ???? ?????
    {
        if (EmptyList())		//?? ????
            throw EmptyDList();

        Node* pntr;
        pntr = temp->Next; //?????????? ?????????? ?????

        pntr->Next->Prev = temp; //????? ??? ?????? ????? ?? ?????????? - ??? ?????

        temp->Next = pntr->Next; //????? ??? ???? - ????? ??? ???????????? ?????.

        *E = pntr->x;

        pntr->Next = NULL; //?????????? ????? ?? ?? ?? ?? ?????
        pntr->Prev = NULL;

        free(pntr);
    }

    ~DList() //????????
    {
        while (Head) //???? ?? ????? ?? ???? ?? ??-? ????
        {
            Tail = Head->Next; //??????? ????? ???? ?????? ????? ??
            delete Head; //???? ????? ?? ????? ?????
            Head = Tail; //????? ???? ???? ?? ???? ?????? ?????
        }
    }
};

bool operator < (const Person p1, const Person p2) {
    if (p1.name != p2.name)
        return p1.name < p2.name;
    else {
        if (p1.age != p2.age)
            return p1.age < p2.age;
        for (int i = 0; i < 4; i++)
            if (p1.marks[i] != p2.marks[i])
                return p1.marks[i] < p2.marks[i];
    }
    return false;
}

bool operator > (const Person p1, const Person p2) {
    if (p1.name != p2.name)
        return p1.name > p2.name;
    else {
        if (p1.age != p2.age)
            return p1.age > p2.age;
        for (int i = 0; i < 4; i++)
            if (p1.marks[i] != p2.marks[i])
                return p1.marks[i] > p2.marks[i];
    }
    return false;

}

bool operator == (const Person p1, const Person p2) {
    if (p1.name != p2.name)
        return false;
    else {
        if (p1.age != p2.age)
            return false;
        for (int i = 0; i < 4; i++)
            if (p1.marks[i] != p2.marks[i])
                return false;
    }
    return true;
}

bool operator != (const Person p1, const Person p2) {
    return !(p1 == p2);
}

bool operator <= (const Person p1, const Person p2) {
    return (p1 < p2) || (p1 == p2);
}

bool operator >= (const Person p1, const Person p2) {
    return (p1 > p2) || (p1 == p2);
}

ostream& operator<< (ostream& out, const Person& p) {
    out << "Last Name: " << p.name << " | Age: " << p.age << " | Marks: ";
    for (auto mark : p.marks)
        out << mark << " ";
    out << endl;
    return out;
}

void personsToFile(size_t n) {
    try {
        FILE* f = NULL;
        fopen_s(&f, "persons.bin", "wb");
        if (f == NULL) throw EndDList();
        for (size_t i = 0; i < n; i++) {
            Person a;
            cout << "ENTER Last Name: "; cin >> a.name;
            cout << "ENTER Age: "; cin >> a.age;
            cout << "ENTER 4 marks: ";
            for (int i = 0; i < 4; i++)
                cin >> a.marks[i];
            fwrite(&a, sizeof(Person), 1, f);
            cout << "+=============================================================+" << endl;
        }
        fclose(f);
    }
    catch (EndDList) {}
}


int main()
{

//personsToFile(1);

    try {
        FILE* f = NULL;
        fopen_s(&f, "persons.bin", "rb");
        DList<Person> x;
        Person a;
        while (fread(&a, sizeof(a), sizeof(Person), f))
            x.AddNode(a);
        fclose(f);
        x.Show();
    }
    catch (EndDList) {}

    return 0;

}

