/*
Даны натуральные числа k, m, n и последовательности символов s1, s2,..., sk, t1, t2,..., tm, u1, u2,..., un.
Получить по одному разу те символы, которые входят во все три последовательности.
*/

#include <iostream>

// описание узла списка
typedef struct TList
{
    // часть с данными
    char item;
    // указатель на следующий элемент списка
    struct TList *next;
} List;

// функция добавления нового элемента в конец списка
// возвращает указатель на начало измененного списка
List* push_back( List *head, char symbol )
{
    // создадим новый узел списка в памяти
    List *ptr = new List;
    // инициализируем поля добавляемого узла списка
    ptr -> item = symbol;
    // зануляем указатель на следующий элемент, т.к. это хвост
    ptr -> next = 0;

    // если входящий список пустой, то просто возвращаем новый узел, который
    // только что создали и иницализировали
    if ( head == 0 )
        return ptr;

    // если список не пуст, то...
    List *temp = head;
    // двигаемся до последнего элемент
    // за последним элементом будет укзатель на пустоту - хвост списка
    while ( temp -> next != 0 )
        // перемещаемся по спсику в конец
        temp = temp -> next;
    // прицепляем к концу нашего списка нвый элемент
    temp -> next = ptr;
    // возвращаем указатель на начало списка
    return head;
}

// печать списка
void printList( List *head )
{
    // получаем указатель на начало списка
    List *ptr = head;

    // если начало списка указывает на NULL , то список пуст
    if ( ptr == 0 )
    {
        // печатаем сообщение об этом и выходим из функции
        std::cout << "List is empty!" << std::endl;
        return;
    }

    // двигаемся по списку до конца
    while ( ptr != 0 )
    {
        // печатаем текущий элемент
        std::cout << ptr -> item << " ";
        // перемещаем указатель
        ptr = ptr -> next;
    }
    // переход нан овую строку
    std::cout << std::endl;
}

// функция проверки на вхождение заданного символа в список
int isExist( List *head, int number )
{
    // получаем указатель на голову списка
    List *ptr = head;
    // идем по списку
    while ( ptr != 0 )
    {
        // если текущий элемент равен тому, что нужно найти,
        // то возвращаем из функции 1
        if ( ptr -> item == number )
            return 1;
        // двигаемся дальше
        ptr = ptr -> next;
    }
    // если прошли весь список и дошли сюда, то нужного элемента в списке нет
    return 0;
}

// функция заполнения списка из count элементов
List* inputList( List *ptr, int count )
{
    // cчетчик итерация цикла
    int i;
    char symbol;
    // идем в цикле count раз
    for( i = 0; i < count; ++i )
    {
        // вводим элемент

        std::cin >> symbol;
        //  и добавляем его в список
        ptr = push_back( ptr, symbol );
    }
    // возвращаем указатель на начало списка ( нового списка )
    return ptr;
}

// функция печати списка, в котором хранятся элементы, встречающиейся во всех списках
void getAloneItems( List *a, List *b, List *c )
{
    // список - результат будет содержать все элементы,
    // которые встречаются во всех списках
    List *result = 0;

    // идем по первому списку и проверяем на вхождение текущего элемента
    // во все другие и не вхождение в список - результат, т.к. по одному разу должно быьт выведено
    for( ; a != 0; a = a -> next )
    {
        // если текущий элемент встречается во втором и третьем спсике, но не встречается в результируемом, то
        // добавляем его в список - результат
        if ( isExist( b, a -> item ) && isExist( c, a -> item ) && !isExist( result, a -> item ) )
            result = push_back( result, a -> item );
    }

    // печатаем результат
    std::cout << "Result: ";
    printList( result );
}

int main()
{
    // вводим размерности списков
    int k, m, n;
    std::cout << " k, m, n: ";
    std::cin >> k >> m >> n;

    // зануляем указатели на начало списков
    List *sList = 0, *tList = 0, *uList = 0;

    // вводим все данные по спискам

    std::cout << " list1:" << std::endl;
    sList = inputList( sList, k );

    std::cout << "list2:" << std::endl;
    tList = inputList( tList, m );

    std::cout << "list3:" << std::endl;
    uList = inputList( uList, n );

    getAloneItems( sList, tList, uList );

    return 0;
}