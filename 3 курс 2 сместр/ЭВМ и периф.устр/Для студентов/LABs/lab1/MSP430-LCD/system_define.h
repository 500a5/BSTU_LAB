/******************************************************************************/              
#ifndef __SYSTEM_DEFINE_H__
#define __SYSTEM_DEFINE_H__
/******************************************************************************/              
#include <msp430.h>
/******************************************************************************/              
#ifndef __BYTE_H__
#define __BYTE_H__
typedef unsigned char	byte;		// 8-bit value
typedef unsigned int	word;		// 16-bit value
#endif
/******************************************************************************/              

/******************************* ADC12.c **************************************/
/******************************************************************************/              

/******************************** DMA0.c **************************************/
/******************************************************************************/              

/******************************* FLASH.c **************************************/
/******************************************************************************/              

/******************************* HW_MAC.c *************************************/
/******************************************************************************/              

/********************************* I2C.c **************************************/
/******************************************************************************/              

/******************************* RS485.c **************************************/
/******************************************************************************/              

/******************************** SCLK.c **************************************/
/******************************************************************************/              

/******************************** sysfunc.c ***********************************/

// output


// Дешифратор DD7								  __
#define nSS BIT0 				/* P1.0 => сигнал SS - сиглал выборки микросхемы */
									//		  __
#define Set_nSS() P1OUT |= nSS 		/* сигнал SS = 1 */
									//		  __
#define Reset_nSS() P1OUT &= ~nSS 	/* сигнал SS = 0 */


//												  __ ___
#define nWR_nRST BIT2 			/* P1.2	=> сигнал WR/RST  - сигнал записи/сброса */
												//		  __ ___
#define Set_nWR_nRST() P1OUT |= nWR_nRST 		/* сигнал WR/RST = 1 */
												//		  __ ___
#define Reset_nWR_nRST() P1OUT &= ~nWR_nRST 	/* сигнал WR/RST = 0 */

//
#define MCU_SEL_0 BIT3 			/* P1.3 => сигнал MCU_SEL_0 - младший бит адреса дешифратора */
#define Set_MCU_SEL_0() P1OUT |= MCU_SEL_0 			/* сигнал MCU_SEL_0 = 1 */
#define Reset_MCU_SEL_0() P1OUT &= ~MCU_SEL_0 		/* сигнал MCU_SEL_0 = 0 */
//
#define MCU_SEL_1 BIT4 			/* P1.4 => сигнал MCU_SEL_1 - старший бит адреса дешифратора */
#define Set_MCU_SEL_1() P1OUT |= MCU_SEL_1 			/* сигнал MCU_SEL_1 = 1 */
#define Reset_MCU_SEL_1() P1OUT &= ~MCU_SEL_1 		/* сигнал MCU_SEL_1 = 0 */


// Адресные линии для модуля ETHERNET xxx7010xx
#define A0 BIT0 				/* P2.0 => сигнал A0 - младший бит адреса для модуля ETHERNET */
//
#define A1 BIT1 				/* P2.1 => сигнал A1 - старший бит адреса для модуля ETHERNET */



// Шина данных
// direction
#define DB_DIR P4DIR			/* Порт P4 <=> двунаправленная шина данных */
// output
#define DB_OUT P4OUT			/* Сигналы DB0-DB7 подключены к порту P4 */
// input
#define DB_IN P4IN
/******************************************************************************/              

/******************************** TIMERA.c ************************************/
/******************************************************************************/

/******************************** TIMERB.c ************************************/
/******************************************************************************/

/********************************* USART.c ************************************/
/******************************************************************************/              

/********************************* lcd.c ************************************/
// Сигналы управления  ЖКИ

//													_
#define D_nC_LCD BIT4 			/* P3.4 => сигнал D/C_LCD (задает режим обмена между МК и ЖКИ - 1-данные, 0-команда для LCD) */
//															_
#define Set_D_nC_LCD() P3OUT |= D_nC_LCD 		/* сигнал D/C_LCD = 1 */
//															_
#define Reset_D_nC_LCD() P3OUT &= ~D_nC_LCD 	/* сигнал D/C_LCD = 0 */



//
#define EN_LCD BIT5				/* P3.5 => сигнал EN_LCD (разрешение обращений к модулю LCD (а также строб данных)) */
//
#define Set_EN_LCD() P3OUT |= EN_LCD 			/* сигнал EN_LCD = 1 */
//
#define Reset_EN_LCD() P3OUT &= ~EN_LCD 		/* сигнал EN_LCD = 0 */
/******************************************************************************/


/******************************************************************************/              
#endif
