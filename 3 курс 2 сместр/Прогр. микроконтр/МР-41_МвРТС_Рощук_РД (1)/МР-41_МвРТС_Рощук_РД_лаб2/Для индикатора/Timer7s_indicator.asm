ORG 0h
	jmp main
t0ISR: 
        ORG 0Bh;Указываем где находится обработчик прерывания таймера 0
        CLR TF0;Первой командой обработчика является команда очистки флага прерывания
        jmp T
        
        ORG 100h
        T:
        MOV TH0,#0D8h;задаем смещение срабатывания таймера
	MOV TL0,#0F0h

        ;Десятки
        MOV A,51h
        CPL A ;Инвертируем
        CLR C ;Cброс переноса
        SUBB A,#0C3h;195
        MOV B, #0Ah
        DIV AB
        MOV 52h,A
        
        ;Единицы
        MOV 53h,B
        
        ;Десятые
        MOV A,50h
        CPL A ;Инвертируем
        SUBB A,#9Bh;155
        MOV B, #0Ah
        DIV AB
        MOV 54h,A
        
        ;Сотые
        MOV 55h,B

        MOV A,#00h;Чтобы не ругался эмулятор
        MOV B,#00h
        DJNZ 50h,MS;Декремент прямоадресуемого байта х10мс и переход, если не нуль
        ;Если 0, то прошло 100 циклов по 10мс и нам надо востановить 100 циклов
        MOV 50h, #64h
        DJNZ 51h,MS;Уменьшаем на 1с и если не 0 переходим
        MOV 51h, #3Ch;Когда переполнится 60 секунд сбрасываем
        MS:
        RETI;Выход из обработчика прерываний
t1ISR:
        ORG 1Bh;Указываем где находится обработчик прерывания таймера 1
        CLR TF1;Первой командой обработчика является команда очистки флага прерывания
        ;Выводим на циферблат 
        MOV P1,#0FFh;Очищаем экран
        CJNE R0,#0h,D1;десятки
        mov R1,52h;Загружаем выводимую цифру
        SETB p3.3;Настраиваем один из 4 индикаторов на вывод
        SETB p3.4
        D1:        
        CJNE R0,#1h,D2;единицы
        mov R1,53h
        CLR p3.3
        SETB p3.4
        D2:        
        CJNE R0,#2h,D3;десятые
        mov R1,54h
        SETB p3.3
        CLR p3.4
        D3:        
        CJNE R0,#3h,D4;сотые
        mov R1,55h
        CLR p3.3
        CLR p3.4
        D4:        
        ;Выводим нужную цифру
        CJNE R1,#0h,C0;Если А не равно цифре, то переходим 
        Sjmp CH0;Выводим эту цифру
        C0:        
        CJNE R1,#1h,C1
        Sjmp CH1
        C1:        
        CJNE R1,#2h,C2
        Sjmp CH2
        C2:        
        CJNE R1,#3h,C3
        Sjmp CH3
        C3:        
        CJNE R1,#4h,C4
        Sjmp CH4
        C4:        
        CJNE R1,#5h,C5
        Sjmp CH5
        C5:        
        CJNE R1,#6h,C6
        Sjmp CH6
        C6:        
        CJNE R1,#7h,C7
        Sjmp CH7
        C7:        
        CJNE R1,#8h,C8
        Sjmp CH8
        C8:
        Sjmp CH9
        
        CH0:
        MOV P1,#11000000b
        jmp D 
        CH1:
        MOV P1,#11111001b
        jmp D
        CH2:
        MOV P1,#10100100b
        jmp D
        CH3:
        MOV P1,#10110000b
        jmp D
        CH4:
        MOV P1,#10011001b
        jmp D
        CH5:
        MOV P1,#10010010b
        jmp D
        CH6:
        MOV P1,#10000010b
        jmp D
        CH7:
        MOV P1,#11111000b
        jmp D
        CH8:
        MOV P1,#10000000b
        jmp D
        CH9:
        MOV P1,#10010000b
        jmp D
        D:
        CJNE R0,#1h,T1;Точка после единицы
        CLR P1.7
        T1:
        inc R0
        CJNE R0,#00000100b,NET;Сравнение регистра с константой и переход, если не равно
        MOV R0,#0b
        NET:
        RETI;Выход из обработчика прерываний
ORG 155h
main:        
        ;T1 M1=1 M0=0 для переключения сегментов 8 бит
	;T0 M1=0 M0=1 для подсчета времени/16бит
	MOV TMOD,#00100001b
	;обновление данных 100гц(10мс)
	MOV TH0,#0FFh;2^16-10000=55536=0D8F0h
	MOV TL0,#099h
        ;разрешаем прерывание от таймера 0
        SETB ET0
        ;разрешаем прерывание от таймера 1
        SETB ET1
        ;разрешаем выполнение прерываний
        SETB EA
        SETB TR0;запускаем таймер 0
        SETB TR1;запускаем таймер 1
        MOV 50h, #64h;Настройка начальных значений секундомера
        MOV 51h, #3Ch
        jmp $;бесконечный цикл ожидания
END
