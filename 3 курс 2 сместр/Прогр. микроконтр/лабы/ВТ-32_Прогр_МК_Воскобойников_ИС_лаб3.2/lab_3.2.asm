org 0h
jmp main

org 30h
main:

    ; Настройка работы UART
    CLR SM0 
    SETB SM1 ; 2 режим, 8 бит, стоп/старт, четность

    MOV A, PCON 
    SETB ACC.7 
    MOV PCON, A ; 7 бит в PCON установлен в 1, множитель скорости 2 
    ; Настройка таймера
    ; При переполнении записывается из TL1 в TH1 (M1 = 1, M0 = 0)
    MOV TMOD, #20H 
    MOV TH1, #243
    MOV TL1, #243 
    SETB TR1 ; запуск таймера 1

    ; Вводим DPTR
    call read_sim
    ; Включаем ЦАП
    clr P0.7

    ;проверям что выбрал пользователь работу с ЦАП или АЦП
    mov A, DPL
    cjne A, #0, main_loop_dac

    main_loop_adc:
    ; R0 = начальное значение
    mov R0, #0     ; 0000 0000
    ; R1 = маска для бита который мы проверям
    mov R1, #080h   ; 1000 0000
    ;помещаем начальный бит для проверки в А
    mov A, R1
    loop_adc_scan:
        orl A, R0   ; Добавляем бит к результирующему числу
        mov P1, A   ; Помещаем рультирующее число в P1 для сравнения
        
        jnb P3.7, skip_bit   ; если входное напряжение больше А то сохраняем текущий бит
        mov R0, A
        
        skip_bit:
        mov A, R1       ; Тут происходит сдвиг текущего бита, что бы на следующей итерации посмотреть следующий
        rr A
        clr ACC.0       ; Убираем последствия циклического сдвига
        mov R1, A
    jnz loop_adc_scan
    mov A, R0
    ; Вывод на ЦАП того что пришло на АЦП
    mov P1, A
    ; Вывод числового представления в uart
    call putc_uart
    
    jmp main_loop_adc

    main_loop_dac:
    ; Вывод на ЦАП величины из таблицы
    mov A, #0
    movc A, @A+DPTR
    mov P1, A
    ; Увеличиваем только младшие 8 бит регистра DPTR
    ;после переполнения оно идет на следующий круг
    inc DPL

    jmp main_loop_dac

read_sim:
	mov r7, #0
read_loop:
	;пока не считываем число в не выходим из цикла
	cjne r7, #0, read_out
	call scanKeyBoard
	jmp read_loop
	
read_out:
	ret

; Сканирование по рядам
scanKeyBoard:
	mov p0, #11111111b

	clr p0.3
 	CALL scanRow1
 	cjne r7, #0, scan_out
 	
	setb p0.3
	clr  p0.2
 	CALL scanRow2
 	cjne r7, #0, scan_out

 	setb p0.2
	clr  p0.0
 	CALL scanRow4
scan_out:
	ret

; Сканирование первого ряда
scanRow1:
	MOV DPTR, #0101h
 	JNB P0.6, pressKeyR1
	
	MOV DPTR, #0201h
 	JNB P0.5, pressKeyR1
	
	MOV DPTR, #0301h
	JNB P0.4, pressKeyR1
 	
	ret ; ключ не найден
	
     pressKeyR1:
	call putc
	ret
; Сканирование второго ряда
scanRow2:
	MOV DPTR, #0401h
 	JNB P0.6, pressKeyR1
	
	MOV DPTR, #0501h
 	JNB P0.5, pressKeyR1
	
	MOV DPTR, #0601h
	JNB P0.4, pressKeyR1
 	
	ret ; ключ не найден
	
     pressKeyR2:
	call putc
	ret

; Сканирование четвертого ряда
scanRow4:

	MOV DPTR, #0
 	JNB P0.5, pressKeyR4
 	
	ret ; ключ не найден
	
     pressKeyR4:
	call putc
	ret

;перевеод числа из A в r7
putc:
	mov r7, #1
	ret

org 0100h
; Синусоида
db 127, 118, 109, 99, 90, 81, 73, 64, 56, 48, 41, 35, 28, 23, 17, 13, 9, 6, 3, 1, 0, 0, 0, 1, 2, 4, 7, 11, 15, 20, 25, 31, 38, 45, 52, 60, 68, 77, 86, 95, 104, 113, 123, 132, 142, 151, 160, 169, 178, 187, 195, 203, 210, 217, 224, 230, 235, 240, 244, 248, 251, 253, 254, 255, 255, 255, 254, 252, 249, 246, 242, 238, 232, 227, 220, 214, 207, 199, 191, 182, 174, 165, 156, 146, 137, 127, 118, 109, 99, 90, 81, 73, 64, 56, 48, 41, 35, 28, 23, 17, 13, 9, 6, 3, 1, 0, 0, 0, 1, 2, 4, 7, 11, 15, 20, 25, 31, 38, 45, 52, 60, 68, 77, 86, 95, 104, 113, 123, 132, 142, 151, 160, 169, 178, 187, 195, 203, 210, 217, 224, 230, 235, 240, 244, 248, 251, 253, 254, 255, 255, 255, 254, 252, 249, 246, 242, 238, 232, 227, 220, 214, 207, 199, 191, 182, 174, 165, 156, 146, 137, 128, 118, 109, 99, 90, 81, 73, 64, 56, 48, 41, 35, 28, 23, 17, 13, 9, 6, 3, 1, 0, 0, 0, 1, 2, 4, 7, 11, 15, 20, 25, 31, 38, 45, 52, 60, 68, 77, 86, 95, 104, 113, 123, 132, 142, 151, 160, 169, 178, 187, 195, 203, 210, 217, 224, 230, 235, 240, 244, 248, 251, 253, 254, 255, 255, 255, 254, 252, 249, 246, 242, 238, 232, 227, 220, 214, 207, 199, 191, 182, 174, 165, 156, 146, 137, 128
org 0200h
; Пила
db 0, 6, 12, 18, 24, 31, 37, 43, 49, 55, 62, 68, 74, 80, 87, 93, 99, 105, 111, 118, 124, 130, 136, 143, 149, 155, 161, 167, 174, 180, 186, 192, 199, 205, 211, 217, 223, 230, 236, 242, 248, 255, 0, 6, 12, 18, 24, 31, 37, 43, 49, 55, 62, 68, 74, 80, 87, 93, 99, 105, 111, 118, 124, 130, 136, 143, 149, 155, 161, 167, 174, 180, 186, 192, 199, 205, 211, 217, 223, 230, 236, 242, 248, 255, 0, 6, 12, 18, 24, 31, 37, 43, 49, 55, 62, 68, 74, 80, 87, 93, 99, 105, 111, 118, 124, 130, 136, 143, 149, 155, 161, 167, 174, 180, 186, 192, 199, 205, 211, 217, 223, 230, 236, 242, 248, 255, 0, 6, 12, 18, 24, 31, 37, 43, 49, 55, 62, 68, 74, 80, 87, 93, 99, 105, 111, 118, 124, 130, 136, 143, 149, 155, 161, 167, 174, 180, 186, 192, 199, 205, 211, 217, 223, 230, 236, 242, 248, 255, 0, 6, 12, 18, 24, 31, 37, 43, 49, 55, 62, 68, 74, 80, 87, 93, 99, 105, 111, 118, 124, 130, 136, 143, 149, 155, 161, 167, 174, 180, 186, 192, 199, 205, 211, 217, 223, 230, 236, 242, 248, 255, 0, 6, 12, 18, 24, 31, 37, 43, 49, 55, 62, 68, 74, 80, 87, 93, 99, 105, 111, 118, 124, 130, 136, 143, 149, 155, 161, 167, 174, 180, 186, 192, 199, 205, 211, 217, 223, 230, 236, 242, 248, 255
org 0300h
; Треугольник
db 0, 6, 12, 18, 24, 31, 37, 43, 49, 55, 62, 68, 74, 80, 87, 93, 99, 105, 111, 118, 124, 130, 136, 143, 149, 155, 161, 167, 174, 180, 186, 192, 199, 205, 211, 217, 223, 230, 236, 242, 248, 255, 255, 248, 242, 236, 230, 223, 217, 211, 205, 199, 192, 186, 180, 174, 167, 161, 155, 149, 143, 136, 130, 124, 118, 111, 105, 99, 93, 87, 80, 74, 68, 62, 55, 49, 43, 37, 31, 24, 18, 12, 6, 0, 0, 6, 12, 18, 24, 31, 37, 43, 49, 55, 62, 68, 74, 80, 87, 93, 99, 105, 111, 118, 124, 130, 136, 143, 149, 155, 161, 167, 174, 180, 186, 192, 199, 205, 211, 217, 223, 230, 236, 242, 248, 255, 255, 248, 242, 236, 230, 223, 217, 211, 205, 199, 192, 186, 180, 174, 167, 161, 155, 149, 143, 136, 130, 124, 118, 111, 105, 99, 93, 87, 80, 74, 68, 62, 55, 49, 43, 37, 31, 24, 18, 12, 6, 0, 0, 6, 12, 18, 24, 31, 37, 43, 49, 55, 62, 68, 74, 80, 87, 93, 99, 105, 111, 118, 124, 130, 136, 143, 149, 155, 161, 167, 174, 180, 186, 192, 199, 205, 211, 217, 223, 230, 236, 242, 248, 255, 255, 248, 242, 236, 230, 223, 217, 211, 205, 199, 192, 186, 180, 174, 167, 161, 155, 149, 143, 136, 130, 124, 118, 111, 105, 99, 93, 87, 80, 74, 68, 62, 55, 49, 43, 37, 31, 24, 18, 12, 6, 0
org 0400h
;парабола
db 255, 232, 209, 188, 167, 148, 130, 113, 98, 83, 70, 58, 47, 37, 28, 20, 14, 9, 5, 2, 0, 0, 0, 2, 5, 9, 14, 20, 28, 37, 47, 58, 70, 83, 98, 113, 130, 148, 167, 188, 209, 232, 255, 255, 232, 209, 188, 167, 148, 130, 113, 98, 83, 70, 58, 47, 37, 28, 20, 14, 9, 5, 2, 0, 0, 0, 2, 5, 9, 14, 20, 28, 37, 47, 58, 70, 83, 98, 113, 130, 148, 167, 188, 209, 232, 255, 255, 232, 209, 188, 167, 148, 130, 113, 98, 83, 70, 58, 47, 37, 28, 20, 14, 9, 5, 2, 0, 0, 0, 2, 5, 9, 14, 20, 28, 37, 47, 58, 70, 83, 98, 113, 130, 148, 167, 188, 209, 232, 255, 255, 232, 209, 188, 167, 148, 130, 113, 98, 83, 70, 58, 47, 37, 28, 20, 14, 9, 5, 2, 0, 0, 0, 2, 5, 9, 14, 20, 28, 37, 47, 58, 70, 83, 98, 113, 130, 148, 167, 188, 209, 232, 255, 255, 232, 209, 188, 167, 148, 130, 113, 98, 83, 70, 58, 47, 37, 28, 20, 14, 9, 5, 2, 0, 0, 0, 2, 5, 9, 14, 20, 28, 37, 47, 58, 70, 83, 98, 113, 130, 148, 167, 188, 209, 232, 255, 255, 232, 209, 188, 167, 148, 130, 113, 98, 83, 70, 58, 47, 37, 28, 20, 14, 9, 5, 2, 0, 0, 0, 2, 5, 9, 14, 20, 28, 37, 47, 58, 70, 83, 98, 113, 130, 148, 167, 188, 209
org 0500h
;кубическая парабола
db 0, 17, 33, 47, 59, 71, 81, 89, 97, 103, 109, 113, 117, 120, 122, 124, 125, 126, 127, 127, 127, 127, 127, 127, 127, 128, 129, 130, 132, 134, 137, 141, 145, 151, 157, 165, 173, 183, 195, 207, 221, 237, 255, 0, 17, 33, 47, 59, 71, 81, 89, 97, 103, 109, 113, 117, 120, 122, 124, 125, 126, 127, 127, 127, 127, 127, 127, 127, 128, 129, 130, 132, 134, 137, 141, 145, 151, 157, 165, 173, 183, 195, 207, 221, 237, 255, 0, 17, 33, 47, 59, 71, 81, 89, 97, 103, 109, 113, 117, 120, 122, 124, 125, 126, 127, 127, 127, 127, 127, 127, 127, 128, 129, 130, 132, 134, 137, 141, 145, 151, 157, 165, 173, 183, 195, 207, 221, 237, 255, 0, 17, 33, 47, 59, 71, 81, 89, 97, 103, 109, 113, 117, 120, 122, 124, 125, 126, 127, 127, 127, 127, 127, 127, 127, 128, 129, 130, 132, 134, 137, 141, 145, 151, 157, 165, 173, 183, 195, 207, 221, 237, 255, 0, 17, 33, 47, 59, 71, 81, 89, 97, 103, 109, 113, 117, 120, 122, 124, 125, 126, 127, 127, 127, 127, 127, 127, 127, 128, 129, 130, 132, 134, 137, 141, 145, 151, 157, 165, 173, 183, 195, 207, 221, 237, 255, 0, 17, 33, 47, 59, 71, 81, 89, 97, 103, 109, 113, 117, 120, 122, 124, 125, 126, 127, 127, 127, 127, 127, 127, 127, 128, 129, 130, 132, 134, 137, 141, 145, 151, 157, 165, 173, 183, 195, 207, 221, 237, 255
org 0600h
;Клыки
db 255, 219, 185, 153, 123, 94, 67, 42, 19, 2, 22, 40, 57, 71, 85, 96, 105, 113, 119, 124, 126, 127, 126, 124, 119, 113, 105, 96, 85, 71, 57, 40, 22, 2, 19, 42, 67, 94, 123, 153, 185, 219, 255, 255, 219, 185, 153, 123, 94, 67, 42, 19, 2, 22, 40, 57, 71, 85, 96, 105, 113, 119, 124, 126, 127, 126, 124, 119, 113, 105, 96, 85, 71, 57, 40, 22, 2, 19, 42, 67, 94, 123, 153, 185, 219, 255, 255, 219, 185, 153, 123, 94, 67, 42, 19, 2, 22, 40, 57, 71, 85, 96, 105, 113, 119, 124, 126, 127, 126, 124, 119, 113, 105, 96, 85, 71, 57, 40, 22, 2, 19, 42, 67, 94, 123, 153, 185, 219, 255, 255, 219, 185, 153, 123, 94, 67, 42, 19, 2, 22, 40, 57, 71, 85, 96, 105, 113, 119, 124, 126, 127, 126, 124, 119, 113, 105, 96, 85, 71, 57, 40, 22, 2, 19, 42, 67, 94, 123, 153, 185, 219, 255, 255, 219, 185, 153, 123, 94, 67, 42, 19, 2, 22, 40, 57, 71, 85, 96, 105, 113, 119, 124, 126, 127, 126, 124, 119, 113, 105, 96, 85, 71, 57, 40, 22, 2, 19, 42, 67, 94, 123, 153, 185, 219, 255, 255, 219, 185, 153, 123, 94, 67, 42, 19, 2, 22, 40, 57, 71, 85, 96, 105, 113, 119, 124, 126, 127, 126, 124, 119, 113, 105, 96, 85, 71, 57, 40, 22, 2, 19, 42, 67, 94, 123, 153, 185, 219, 255

putc_uart:
    ;Вывод содержимого А в UART
    ;постепенно делим, берем разряды, добавляем к ним код нуля и выводим
    mov B, #10
    div AB
    mov R2, B ; 3ий разряд
    
    mov B, #10
    div AB
    mov R1, B ; 2ой разряд
    
    add A, #'0' ; Добавляем код 0 что бы превратить символ в цифру
    mov SBUF, A ; Вывод 1го разряда
    jnb TI, $   ; Ждем пока установиться бит, а следовательно символ выведется
    clr TI
    
    mov A, R1
    add A, #'0' ; Добавляем код 0 что бы превратить символ в цифру
    mov SBUF, A ; Вывод 2го разряда
    jnb TI, $   ; Ждем пока установиться бит, а следовательно символ выведется
    clr TI
    
    mov A, R2
    add A, #'0' ; Добавляем код 0 что бы превратить символ в цифру
    mov SBUF, A ; Вывод 3го разряда
    jnb TI, $   ; Ждем пока установиться бит, а следовательно символ выведется
    clr TI

    ; Вывод символа переноса возврата корретки и переноса строки
    mov SBUF, #'\r'
    jnb TI, $   ; Ждем пока установиться бит, а следовательно символ выведется
    clr TI
    
    mov SBUF, #'\n'
    jnb TI, $   ; Ждем пока установиться бит, а следовательно символ выведется
    clr TI
    ret
END
